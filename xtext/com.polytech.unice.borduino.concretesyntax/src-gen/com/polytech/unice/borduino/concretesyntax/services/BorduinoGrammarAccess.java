/*
 * generated by Xtext 2.14.0
 */
package com.polytech.unice.borduino.concretesyntax.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BorduinoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class AppElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.App");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAppKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cInitialStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitialAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cInitialStateCrossReference_3_0 = (CrossReference)cInitialAssignment_3.eContents().get(0);
		private final RuleCall cInitialStateEStringParserRuleCall_3_0_1 = (RuleCall)cInitialStateCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cBricksKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBricksAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBricksBrickParserRuleCall_6_0 = (RuleCall)cBricksAssignment_6.eContents().get(0);
		private final Assignment cBricksAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBricksBrickParserRuleCall_7_0 = (RuleCall)cBricksAssignment_7.eContents().get(0);
		private final Keyword cStatesKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStatesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStatesStateParserRuleCall_9_0 = (RuleCall)cStatesAssignment_9.eContents().get(0);
		private final Assignment cStatesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cStatesStateParserRuleCall_10_0 = (RuleCall)cStatesAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//App:
		//	'app' name=EString 'initial state' initial=[State|EString]
		//	'{'
		//	'bricks'
		//	bricks+=Brick
		//	bricks+=Brick*
		//	'states'
		//	states+=State
		//	states+=State*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'app' name=EString 'initial state' initial=[State|EString] '{' 'bricks' bricks+=Brick bricks+=Brick* 'states'
		//states+=State states+=State* '}'
		public Group getGroup() { return cGroup; }
		
		//'app'
		public Keyword getAppKeyword_0() { return cAppKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'initial state'
		public Keyword getInitialStateKeyword_2() { return cInitialStateKeyword_2; }
		
		//initial=[State|EString]
		public Assignment getInitialAssignment_3() { return cInitialAssignment_3; }
		
		//[State|EString]
		public CrossReference getInitialStateCrossReference_3_0() { return cInitialStateCrossReference_3_0; }
		
		//EString
		public RuleCall getInitialStateEStringParserRuleCall_3_0_1() { return cInitialStateEStringParserRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'bricks'
		public Keyword getBricksKeyword_5() { return cBricksKeyword_5; }
		
		//bricks+=Brick
		public Assignment getBricksAssignment_6() { return cBricksAssignment_6; }
		
		//Brick
		public RuleCall getBricksBrickParserRuleCall_6_0() { return cBricksBrickParserRuleCall_6_0; }
		
		//bricks+=Brick*
		public Assignment getBricksAssignment_7() { return cBricksAssignment_7; }
		
		//Brick
		public RuleCall getBricksBrickParserRuleCall_7_0() { return cBricksBrickParserRuleCall_7_0; }
		
		//'states'
		public Keyword getStatesKeyword_8() { return cStatesKeyword_8; }
		
		//states+=State
		public Assignment getStatesAssignment_9() { return cStatesAssignment_9; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_9_0() { return cStatesStateParserRuleCall_9_0; }
		
		//states+=State*
		public Assignment getStatesAssignment_10() { return cStatesAssignment_10; }
		
		//State
		public RuleCall getStatesStateParserRuleCall_10_0() { return cStatesStateParserRuleCall_10_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class BrickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.Brick");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cActuatorParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cSensorParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cPinsAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cPinsEIntParserRuleCall_0_3_0 = (RuleCall)cPinsAssignment_0_3.eContents().get(0);
		private final Assignment cPinsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cPinsEIntParserRuleCall_0_4_0 = (RuleCall)cPinsAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLCDScreenActuatorParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cPinsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cPinsEIntParserRuleCall_1_3_0 = (RuleCall)cPinsAssignment_1_3.eContents().get(0);
		private final Assignment cPinsAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cPinsEIntParserRuleCall_1_4_0 = (RuleCall)cPinsAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cKeyboardSensorParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		
		//Brick:
		//	(Actuator | Sensor) name=EString ':' pins+=EInt pins+=EInt* | LCDScreenActuator name=EString ':' pins+=EInt
		//	pins+=EInt* | KeyboardSensor name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//(Actuator | Sensor) name=EString ':' pins+=EInt pins+=EInt* | LCDScreenActuator name=EString ':' pins+=EInt pins+=EInt*
		//| KeyboardSensor name=EString
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(Actuator | Sensor) name=EString ':' pins+=EInt pins+=EInt*
		public Group getGroup_0() { return cGroup_0; }
		
		//Actuator | Sensor
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//Actuator
		public RuleCall getActuatorParserRuleCall_0_0_0() { return cActuatorParserRuleCall_0_0_0; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0_0_1() { return cSensorParserRuleCall_0_0_1; }
		
		//name=EString
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_1_0() { return cNameEStringParserRuleCall_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }
		
		//pins+=EInt
		public Assignment getPinsAssignment_0_3() { return cPinsAssignment_0_3; }
		
		//EInt
		public RuleCall getPinsEIntParserRuleCall_0_3_0() { return cPinsEIntParserRuleCall_0_3_0; }
		
		//pins+=EInt*
		public Assignment getPinsAssignment_0_4() { return cPinsAssignment_0_4; }
		
		//EInt
		public RuleCall getPinsEIntParserRuleCall_0_4_0() { return cPinsEIntParserRuleCall_0_4_0; }
		
		//LCDScreenActuator name=EString ':' pins+=EInt pins+=EInt*
		public Group getGroup_1() { return cGroup_1; }
		
		//LCDScreenActuator
		public RuleCall getLCDScreenActuatorParserRuleCall_1_0() { return cLCDScreenActuatorParserRuleCall_1_0; }
		
		//name=EString
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_1_0() { return cNameEStringParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//pins+=EInt
		public Assignment getPinsAssignment_1_3() { return cPinsAssignment_1_3; }
		
		//EInt
		public RuleCall getPinsEIntParserRuleCall_1_3_0() { return cPinsEIntParserRuleCall_1_3_0; }
		
		//pins+=EInt*
		public Assignment getPinsAssignment_1_4() { return cPinsAssignment_1_4; }
		
		//EInt
		public RuleCall getPinsEIntParserRuleCall_1_4_0() { return cPinsEIntParserRuleCall_1_4_0; }
		
		//KeyboardSensor name=EString
		public Group getGroup_2() { return cGroup_2; }
		
		//KeyboardSensor
		public RuleCall getKeyboardSensorParserRuleCall_2_0() { return cKeyboardSensorParserRuleCall_2_0; }
		
		//name=EString
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_1_0() { return cNameEStringParserRuleCall_2_1_0; }
	}
	public class ActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.Actuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActuatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActuatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Actuator:
		//	{Actuator}
		//	'actuator';
		@Override public ParserRule getRule() { return rule; }
		
		//{Actuator} 'actuator'
		public Group getGroup() { return cGroup; }
		
		//{Actuator}
		public Action getActuatorAction_0() { return cActuatorAction_0; }
		
		//'actuator'
		public Keyword getActuatorKeyword_1() { return cActuatorKeyword_1; }
	}
	public class LCDScreenActuatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.LCDScreenActuator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLCDScreenActuatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cScreenActuatorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//LCDScreenActuator:
		//	{LCDScreenActuator}
		//	'screenActuator';
		@Override public ParserRule getRule() { return rule; }
		
		//{LCDScreenActuator} 'screenActuator'
		public Group getGroup() { return cGroup; }
		
		//{LCDScreenActuator}
		public Action getLCDScreenActuatorAction_0() { return cLCDScreenActuatorAction_0; }
		
		//'screenActuator'
		public Keyword getScreenActuatorKeyword_1() { return cScreenActuatorKeyword_1; }
	}
	public class KeyboardSensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.KeyboardSensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKeyboardSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cKeyboardSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//KeyboardSensor:
		//	{KeyboardSensor}
		//	'keyboardSensor';
		@Override public ParserRule getRule() { return rule; }
		
		//{KeyboardSensor} 'keyboardSensor'
		public Group getGroup() { return cGroup; }
		
		//{KeyboardSensor}
		public Action getKeyboardSensorAction_0() { return cKeyboardSensorAction_0; }
		
		//'keyboardSensor'
		public Keyword getKeyboardSensorKeyword_1() { return cKeyboardSensorKeyword_1; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSensorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSensorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Sensor:
		//	{Sensor}
		//	'sensor';
		@Override public ParserRule getRule() { return rule; }
		
		//{Sensor} 'sensor'
		public Group getGroup() { return cGroup; }
		
		//{Sensor}
		public Action getSensorAction_0() { return cSensorAction_0; }
		
		//'sensor'
		public Keyword getSensorKeyword_1() { return cSensorKeyword_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_2_0 = (RuleCall)cActionsAssignment_2.eContents().get(0);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsActionParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		private final Assignment cTransitionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTransitionTransitionParserRuleCall_4_0 = (RuleCall)cTransitionAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//State:
		//	name=EString
		//	'{'
		//	actions+=Action
		//	actions+=Action*
		//	transition=Transition
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString '{' actions+=Action actions+=Action* transition=Transition '}'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//actions+=Action
		public Assignment getActionsAssignment_2() { return cActionsAssignment_2; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_2_0() { return cActionsActionParserRuleCall_2_0; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_3_0() { return cActionsActionParserRuleCall_3_0; }
		
		//transition=Transition
		public Assignment getTransitionAssignment_4() { return cTransitionAssignment_4; }
		
		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_4_0() { return cTransitionTransitionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActuatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActuatorActuatorCrossReference_0_0 = (CrossReference)cActuatorAssignment_0.eContents().get(0);
		private final RuleCall cActuatorActuatorEStringParserRuleCall_0_0_1 = (RuleCall)cActuatorActuatorCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSignalParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Action:
		//	actuator=[Actuator|EString] ':' value=Signal;
		@Override public ParserRule getRule() { return rule; }
		
		//actuator=[Actuator|EString] ':' value=Signal
		public Group getGroup() { return cGroup; }
		
		//actuator=[Actuator|EString]
		public Assignment getActuatorAssignment_0() { return cActuatorAssignment_0; }
		
		//[Actuator|EString]
		public CrossReference getActuatorActuatorCrossReference_0_0() { return cActuatorActuatorCrossReference_0_0; }
		
		//EString
		public RuleCall getActuatorActuatorEStringParserRuleCall_0_0_1() { return cActuatorActuatorEStringParserRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=Signal
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Signal
		public RuleCall getValueSignalParserRuleCall_2_0() { return cValueSignalParserRuleCall_2_0; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionsInitialConditionParserRuleCall_0_0 = (RuleCall)cConditionsAssignment_0.eContents().get(0);
		private final Assignment cConditionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_1_0 = (RuleCall)cConditionsAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNextAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNextStateCrossReference_3_0 = (CrossReference)cNextAssignment_3.eContents().get(0);
		private final RuleCall cNextStateEStringParserRuleCall_3_0_1 = (RuleCall)cNextStateCrossReference_3_0.eContents().get(1);
		
		//Transition:
		//	conditions+=InitialCondition conditions+=Condition* ':' next=[State|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//conditions+=InitialCondition conditions+=Condition* ':' next=[State|EString]
		public Group getGroup() { return cGroup; }
		
		//conditions+=InitialCondition
		public Assignment getConditionsAssignment_0() { return cConditionsAssignment_0; }
		
		//InitialCondition
		public RuleCall getConditionsInitialConditionParserRuleCall_0_0() { return cConditionsInitialConditionParserRuleCall_0_0; }
		
		//conditions+=Condition*
		public Assignment getConditionsAssignment_1() { return cConditionsAssignment_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_1_0() { return cConditionsConditionParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//next=[State|EString]
		public Assignment getNextAssignment_3() { return cNextAssignment_3; }
		
		//[State|EString]
		public CrossReference getNextStateCrossReference_3_0() { return cNextStateCrossReference_3_0; }
		
		//EString
		public RuleCall getNextStateEStringParserRuleCall_3_0_1() { return cNextStateEStringParserRuleCall_3_0_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cSensorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSensorSensorCrossReference_1_0 = (CrossReference)cSensorAssignment_1.eContents().get(0);
		private final RuleCall cSensorSensorEStringParserRuleCall_1_0_1 = (RuleCall)cSensorSensorCrossReference_1_0.eContents().get(1);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSignalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSignalSignalParserRuleCall_3_0 = (RuleCall)cSignalAssignment_3.eContents().get(0);
		
		//Condition:
		//	operator=Operator sensor=[Sensor|EString] 'is' signal=Signal;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=Operator sensor=[Sensor|EString] 'is' signal=Signal
		public Group getGroup() { return cGroup; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_0_0() { return cOperatorOperatorEnumRuleCall_0_0; }
		
		//sensor=[Sensor|EString]
		public Assignment getSensorAssignment_1() { return cSensorAssignment_1; }
		
		//[Sensor|EString]
		public CrossReference getSensorSensorCrossReference_1_0() { return cSensorSensorCrossReference_1_0; }
		
		//EString
		public RuleCall getSensorSensorEStringParserRuleCall_1_0_1() { return cSensorSensorEStringParserRuleCall_1_0_1; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//signal=Signal
		public Assignment getSignalAssignment_3() { return cSignalAssignment_3; }
		
		//Signal
		public RuleCall getSignalSignalParserRuleCall_3_0() { return cSignalSignalParserRuleCall_3_0; }
	}
	public class InitialConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.InitialCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSensorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSensorSensorCrossReference_0_0 = (CrossReference)cSensorAssignment_0.eContents().get(0);
		private final RuleCall cSensorSensorEStringParserRuleCall_0_0_1 = (RuleCall)cSensorSensorCrossReference_0_0.eContents().get(1);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSignalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSignalSignalParserRuleCall_2_0 = (RuleCall)cSignalAssignment_2.eContents().get(0);
		
		//InitialCondition Condition:
		//	sensor=[Sensor|EString] 'is' signal=Signal;
		@Override public ParserRule getRule() { return rule; }
		
		//sensor=[Sensor|EString] 'is' signal=Signal
		public Group getGroup() { return cGroup; }
		
		//sensor=[Sensor|EString]
		public Assignment getSensorAssignment_0() { return cSensorAssignment_0; }
		
		//[Sensor|EString]
		public CrossReference getSensorSensorCrossReference_0_0() { return cSensorSensorCrossReference_0_0; }
		
		//EString
		public RuleCall getSensorSensorEStringParserRuleCall_0_0_1() { return cSensorSensorEStringParserRuleCall_0_0_1; }
		
		//'is'
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }
		
		//signal=Signal
		public Assignment getSignalAssignment_2() { return cSignalAssignment_2; }
		
		//Signal
		public RuleCall getSignalSignalParserRuleCall_2_0() { return cSignalSignalParserRuleCall_2_0; }
	}
	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.Signal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDigitalSignalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringSignalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Signal:
		//	DigitalSignal | StringSignal;
		@Override public ParserRule getRule() { return rule; }
		
		//DigitalSignal | StringSignal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DigitalSignal
		public RuleCall getDigitalSignalParserRuleCall_0() { return cDigitalSignalParserRuleCall_0; }
		
		//StringSignal
		public RuleCall getStringSignalParserRuleCall_1() { return cStringSignalParserRuleCall_1; }
	}
	public class DigitalSignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.DigitalSignal");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDigitalSignalEnumEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DigitalSignal:
		//	value=DigitalSignalEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DigitalSignalEnum
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DigitalSignalEnum
		public RuleCall getValueDigitalSignalEnumEnumRuleCall_0() { return cValueDigitalSignalEnumEnumRuleCall_0; }
	}
	public class StringSignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.StringSignal");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEStringParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringSignal:
		//	value=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EString
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EString
		public RuleCall getValueEStringParserRuleCall_0() { return cValueEStringParserRuleCall_0; }
	}
	
	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAndKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOROrKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Operator:
		//	AND="and" | OR="or";
		public EnumRule getRule() { return rule; }
		
		//AND="and" | OR="or"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND="and"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//"and"
		public Keyword getANDAndKeyword_0_0() { return cANDAndKeyword_0_0; }
		
		//OR="or"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//"or"
		public Keyword getOROrKeyword_1_0() { return cOROrKeyword_1_0; }
	}
	public class DigitalSignalEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.polytech.unice.borduino.concretesyntax.Borduino.DigitalSignalEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHIGHEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHIGHHIGHKeyword_0_0 = (Keyword)cHIGHEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLOWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLOWLOWKeyword_1_0 = (Keyword)cLOWEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DigitalSignalEnum:
		//	HIGH | LOW;
		public EnumRule getRule() { return rule; }
		
		//HIGH | LOW
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HIGH
		public EnumLiteralDeclaration getHIGHEnumLiteralDeclaration_0() { return cHIGHEnumLiteralDeclaration_0; }
		
		//"HIGH"
		public Keyword getHIGHHIGHKeyword_0_0() { return cHIGHHIGHKeyword_0_0; }
		
		//LOW
		public EnumLiteralDeclaration getLOWEnumLiteralDeclaration_1() { return cLOWEnumLiteralDeclaration_1; }
		
		//"LOW"
		public Keyword getLOWLOWKeyword_1_0() { return cLOWLOWKeyword_1_0; }
	}
	
	private final AppElements pApp;
	private final BrickElements pBrick;
	private final ActuatorElements pActuator;
	private final LCDScreenActuatorElements pLCDScreenActuator;
	private final KeyboardSensorElements pKeyboardSensor;
	private final SensorElements pSensor;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final StateElements pState;
	private final ActionElements pAction;
	private final TransitionElements pTransition;
	private final ConditionElements pCondition;
	private final InitialConditionElements pInitialCondition;
	private final SignalElements pSignal;
	private final DigitalSignalElements pDigitalSignal;
	private final StringSignalElements pStringSignal;
	private final OperatorElements eOperator;
	private final DigitalSignalEnumElements eDigitalSignalEnum;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BorduinoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pApp = new AppElements();
		this.pBrick = new BrickElements();
		this.pActuator = new ActuatorElements();
		this.pLCDScreenActuator = new LCDScreenActuatorElements();
		this.pKeyboardSensor = new KeyboardSensorElements();
		this.pSensor = new SensorElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pState = new StateElements();
		this.pAction = new ActionElements();
		this.pTransition = new TransitionElements();
		this.pCondition = new ConditionElements();
		this.pInitialCondition = new InitialConditionElements();
		this.pSignal = new SignalElements();
		this.pDigitalSignal = new DigitalSignalElements();
		this.pStringSignal = new StringSignalElements();
		this.eOperator = new OperatorElements();
		this.eDigitalSignalEnum = new DigitalSignalEnumElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.polytech.unice.borduino.concretesyntax.Borduino".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//App:
	//	'app' name=EString 'initial state' initial=[State|EString]
	//	'{'
	//	'bricks'
	//	bricks+=Brick
	//	bricks+=Brick*
	//	'states'
	//	states+=State
	//	states+=State*
	//	'}';
	public AppElements getAppAccess() {
		return pApp;
	}
	
	public ParserRule getAppRule() {
		return getAppAccess().getRule();
	}
	
	//Brick:
	//	(Actuator | Sensor) name=EString ':' pins+=EInt pins+=EInt* | LCDScreenActuator name=EString ':' pins+=EInt
	//	pins+=EInt* | KeyboardSensor name=EString;
	public BrickElements getBrickAccess() {
		return pBrick;
	}
	
	public ParserRule getBrickRule() {
		return getBrickAccess().getRule();
	}
	
	//Actuator:
	//	{Actuator}
	//	'actuator';
	public ActuatorElements getActuatorAccess() {
		return pActuator;
	}
	
	public ParserRule getActuatorRule() {
		return getActuatorAccess().getRule();
	}
	
	//LCDScreenActuator:
	//	{LCDScreenActuator}
	//	'screenActuator';
	public LCDScreenActuatorElements getLCDScreenActuatorAccess() {
		return pLCDScreenActuator;
	}
	
	public ParserRule getLCDScreenActuatorRule() {
		return getLCDScreenActuatorAccess().getRule();
	}
	
	//KeyboardSensor:
	//	{KeyboardSensor}
	//	'keyboardSensor';
	public KeyboardSensorElements getKeyboardSensorAccess() {
		return pKeyboardSensor;
	}
	
	public ParserRule getKeyboardSensorRule() {
		return getKeyboardSensorAccess().getRule();
	}
	
	//Sensor:
	//	{Sensor}
	//	'sensor';
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//State:
	//	name=EString
	//	'{'
	//	actions+=Action
	//	actions+=Action*
	//	transition=Transition
	//	'}';
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}
	
	//Action:
	//	actuator=[Actuator|EString] ':' value=Signal;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Transition:
	//	conditions+=InitialCondition conditions+=Condition* ':' next=[State|EString];
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//Condition:
	//	operator=Operator sensor=[Sensor|EString] 'is' signal=Signal;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//InitialCondition Condition:
	//	sensor=[Sensor|EString] 'is' signal=Signal;
	public InitialConditionElements getInitialConditionAccess() {
		return pInitialCondition;
	}
	
	public ParserRule getInitialConditionRule() {
		return getInitialConditionAccess().getRule();
	}
	
	//Signal:
	//	DigitalSignal | StringSignal;
	public SignalElements getSignalAccess() {
		return pSignal;
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}
	
	//DigitalSignal:
	//	value=DigitalSignalEnum;
	public DigitalSignalElements getDigitalSignalAccess() {
		return pDigitalSignal;
	}
	
	public ParserRule getDigitalSignalRule() {
		return getDigitalSignalAccess().getRule();
	}
	
	//StringSignal:
	//	value=EString;
	public StringSignalElements getStringSignalAccess() {
		return pStringSignal;
	}
	
	public ParserRule getStringSignalRule() {
		return getStringSignalAccess().getRule();
	}
	
	//enum Operator:
	//	AND="and" | OR="or";
	public OperatorElements getOperatorAccess() {
		return eOperator;
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//enum DigitalSignalEnum:
	//	HIGH | LOW;
	public DigitalSignalEnumElements getDigitalSignalEnumAccess() {
		return eDigitalSignalEnum;
	}
	
	public EnumRule getDigitalSignalEnumRule() {
		return getDigitalSignalEnumAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
