/*
 * generated by Xtext 2.14.0
 */
grammar InternalBorduino;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.polytech.unice.borduino.concretesyntax.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.polytech.unice.borduino.concretesyntax.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.polytech.unice.borduino.concretesyntax.services.BorduinoGrammarAccess;

}
@parser::members {
	private BorduinoGrammarAccess grammarAccess;

	public void setGrammarAccess(BorduinoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleApp
entryRuleApp
:
{ before(grammarAccess.getAppRule()); }
	 ruleApp
{ after(grammarAccess.getAppRule()); } 
	 EOF 
;

// Rule App
ruleApp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAppAccess().getGroup()); }
		(rule__App__Group__0)
		{ after(grammarAccess.getAppAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBrick
entryRuleBrick
:
{ before(grammarAccess.getBrickRule()); }
	 ruleBrick
{ after(grammarAccess.getBrickRule()); } 
	 EOF 
;

// Rule Brick
ruleBrick 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBrickAccess().getGroup()); }
		(rule__Brick__Group__0)
		{ after(grammarAccess.getBrickAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBrick2
entryRuleBrick2
:
{ before(grammarAccess.getBrick2Rule()); }
	 ruleBrick2
{ after(grammarAccess.getBrick2Rule()); } 
	 EOF 
;

// Rule Brick2
ruleBrick2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBrick2Access().getGroup()); }
		(rule__Brick2__Group__0)
		{ after(grammarAccess.getBrick2Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActuator
entryRuleActuator
:
{ before(grammarAccess.getActuatorRule()); }
	 ruleActuator
{ after(grammarAccess.getActuatorRule()); } 
	 EOF 
;

// Rule Actuator
ruleActuator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActuatorAccess().getGroup()); }
		(rule__Actuator__Group__0)
		{ after(grammarAccess.getActuatorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLCDScreenActuator
entryRuleLCDScreenActuator
:
{ before(grammarAccess.getLCDScreenActuatorRule()); }
	 ruleLCDScreenActuator
{ after(grammarAccess.getLCDScreenActuatorRule()); } 
	 EOF 
;

// Rule LCDScreenActuator
ruleLCDScreenActuator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLCDScreenActuatorAccess().getGroup()); }
		(rule__LCDScreenActuator__Group__0)
		{ after(grammarAccess.getLCDScreenActuatorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSensor
entryRuleSensor
:
{ before(grammarAccess.getSensorRule()); }
	 ruleSensor
{ after(grammarAccess.getSensorRule()); } 
	 EOF 
;

// Rule Sensor
ruleSensor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSensorAccess().getGroup()); }
		(rule__Sensor__Group__0)
		{ after(grammarAccess.getSensorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleState
entryRuleState
:
{ before(grammarAccess.getStateRule()); }
	 ruleState
{ after(grammarAccess.getStateRule()); } 
	 EOF 
;

// Rule State
ruleState 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateAccess().getGroup()); }
		(rule__State__Group__0)
		{ after(grammarAccess.getStateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getGroup()); }
		(rule__Action__Group__0)
		{ after(grammarAccess.getActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTransition
entryRuleTransition
:
{ before(grammarAccess.getTransitionRule()); }
	 ruleTransition
{ after(grammarAccess.getTransitionRule()); } 
	 EOF 
;

// Rule Transition
ruleTransition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTransitionAccess().getGroup()); }
		(rule__Transition__Group__0)
		{ after(grammarAccess.getTransitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getGroup()); }
		(rule__Condition__Group__0)
		{ after(grammarAccess.getConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInitialCondition
entryRuleInitialCondition
:
{ before(grammarAccess.getInitialConditionRule()); }
	 ruleInitialCondition
{ after(grammarAccess.getInitialConditionRule()); } 
	 EOF 
;

// Rule InitialCondition
ruleInitialCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInitialConditionAccess().getGroup()); }
		(rule__InitialCondition__Group__0)
		{ after(grammarAccess.getInitialConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSignal
entryRuleSignal
:
{ before(grammarAccess.getSignalRule()); }
	 ruleSignal
{ after(grammarAccess.getSignalRule()); } 
	 EOF 
;

// Rule Signal
ruleSignal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSignalAccess().getAlternatives()); }
		(rule__Signal__Alternatives)
		{ after(grammarAccess.getSignalAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDigitalSignal
entryRuleDigitalSignal
:
{ before(grammarAccess.getDigitalSignalRule()); }
	 ruleDigitalSignal
{ after(grammarAccess.getDigitalSignalRule()); } 
	 EOF 
;

// Rule DigitalSignal
ruleDigitalSignal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDigitalSignalAccess().getValueAssignment()); }
		(rule__DigitalSignal__ValueAssignment)
		{ after(grammarAccess.getDigitalSignalAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringSignal
entryRuleStringSignal
:
{ before(grammarAccess.getStringSignalRule()); }
	 ruleStringSignal
{ after(grammarAccess.getStringSignalRule()); } 
	 EOF 
;

// Rule StringSignal
ruleStringSignal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringSignalAccess().getValueAssignment()); }
		(rule__StringSignal__ValueAssignment)
		{ after(grammarAccess.getStringSignalAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Operator
ruleOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
		(rule__Operator__Alternatives)
		{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule DigitalSignalEnum
ruleDigitalSignalEnum
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDigitalSignalEnumAccess().getAlternatives()); }
		(rule__DigitalSignalEnum__Alternatives)
		{ after(grammarAccess.getDigitalSignalEnumAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBrickAccess().getActuatorParserRuleCall_0_0()); }
		ruleActuator
		{ after(grammarAccess.getBrickAccess().getActuatorParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBrickAccess().getSensorParserRuleCall_0_1()); }
		ruleSensor
		{ after(grammarAccess.getBrickAccess().getSensorParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSignalAccess().getDigitalSignalParserRuleCall_0()); }
		ruleDigitalSignal
		{ after(grammarAccess.getSignalAccess().getDigitalSignalParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSignalAccess().getStringSignalParserRuleCall_1()); }
		ruleStringSignal
		{ after(grammarAccess.getSignalAccess().getStringSignalParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorAccess().getANDEnumLiteralDeclaration_0()); }
		('and')
		{ after(grammarAccess.getOperatorAccess().getANDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getOREnumLiteralDeclaration_1()); }
		('or')
		{ after(grammarAccess.getOperatorAccess().getOREnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DigitalSignalEnum__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDigitalSignalEnumAccess().getHIGHEnumLiteralDeclaration_0()); }
		('HIGH')
		{ after(grammarAccess.getDigitalSignalEnumAccess().getHIGHEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDigitalSignalEnumAccess().getLOWEnumLiteralDeclaration_1()); }
		('LOW')
		{ after(grammarAccess.getDigitalSignalEnumAccess().getLOWEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__App__Group__0__Impl
	rule__App__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppAccess().getAppKeyword_0()); }
	'app'
	{ after(grammarAccess.getAppAccess().getAppKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__App__Group__1__Impl
	rule__App__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppAccess().getNameAssignment_1()); }
	(rule__App__NameAssignment_1)
	{ after(grammarAccess.getAppAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__App__Group__2__Impl
	rule__App__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppAccess().getInitialStateKeyword_2()); }
	'initial state'
	{ after(grammarAccess.getAppAccess().getInitialStateKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__App__Group__3__Impl
	rule__App__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppAccess().getInitialAssignment_3()); }
	(rule__App__InitialAssignment_3)
	{ after(grammarAccess.getAppAccess().getInitialAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__App__Group__4__Impl
	rule__App__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getAppAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__App__Group__5__Impl
	rule__App__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppAccess().getBricksKeyword_5()); }
	'bricks'
	{ after(grammarAccess.getAppAccess().getBricksKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__App__Group__6__Impl
	rule__App__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppAccess().getBricksAssignment_6()); }
	(rule__App__BricksAssignment_6)
	{ after(grammarAccess.getAppAccess().getBricksAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__App__Group__7__Impl
	rule__App__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppAccess().getBricksAssignment_7()); }
	(rule__App__BricksAssignment_7)*
	{ after(grammarAccess.getAppAccess().getBricksAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__App__Group__8__Impl
	rule__App__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppAccess().getBricksAssignment_8()); }
	(rule__App__BricksAssignment_8)*
	{ after(grammarAccess.getAppAccess().getBricksAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__App__Group__9__Impl
	rule__App__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppAccess().getStatesKeyword_9()); }
	'states'
	{ after(grammarAccess.getAppAccess().getStatesKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__App__Group__10__Impl
	rule__App__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppAccess().getStatesAssignment_10()); }
	(rule__App__StatesAssignment_10)
	{ after(grammarAccess.getAppAccess().getStatesAssignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__App__Group__11__Impl
	rule__App__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppAccess().getStatesAssignment_11()); }
	(rule__App__StatesAssignment_11)*
	{ after(grammarAccess.getAppAccess().getStatesAssignment_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__App__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__App__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAppAccess().getRightCurlyBracketKeyword_12()); }
	'}'
	{ after(grammarAccess.getAppAccess().getRightCurlyBracketKeyword_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Brick__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Brick__Group__0__Impl
	rule__Brick__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrickAccess().getAlternatives_0()); }
	(rule__Brick__Alternatives_0)
	{ after(grammarAccess.getBrickAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Brick__Group__1__Impl
	rule__Brick__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrickAccess().getNameAssignment_1()); }
	(rule__Brick__NameAssignment_1)
	{ after(grammarAccess.getBrickAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Brick__Group__2__Impl
	rule__Brick__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrickAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getBrickAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Brick__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrickAccess().getPinAssignment_3()); }
	(rule__Brick__PinAssignment_3)
	{ after(grammarAccess.getBrickAccess().getPinAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Brick2__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Brick2__Group__0__Impl
	rule__Brick2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick2__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrick2Access().getLCDScreenActuatorParserRuleCall_0()); }
	ruleLCDScreenActuator
	{ after(grammarAccess.getBrick2Access().getLCDScreenActuatorParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick2__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Brick2__Group__1__Impl
	rule__Brick2__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick2__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrick2Access().getNameAssignment_1()); }
	(rule__Brick2__NameAssignment_1)
	{ after(grammarAccess.getBrick2Access().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick2__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Brick2__Group__2__Impl
	rule__Brick2__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick2__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrick2Access().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getBrick2Access().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick2__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Brick2__Group__3__Impl
	rule__Brick2__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick2__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrick2Access().getPinsAssignment_3()); }
	(rule__Brick2__PinsAssignment_3)
	{ after(grammarAccess.getBrick2Access().getPinsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick2__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Brick2__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick2__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBrick2Access().getPinsAssignment_4()); }
	(rule__Brick2__PinsAssignment_4)*
	{ after(grammarAccess.getBrick2Access().getPinsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Actuator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group__0__Impl
	rule__Actuator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getActuatorAction_0()); }
	()
	{ after(grammarAccess.getActuatorAccess().getActuatorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Actuator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Actuator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActuatorAccess().getActuatorKeyword_1()); }
	'actuator'
	{ after(grammarAccess.getActuatorAccess().getActuatorKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LCDScreenActuator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LCDScreenActuator__Group__0__Impl
	rule__LCDScreenActuator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LCDScreenActuator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLCDScreenActuatorAccess().getLCDScreenActuatorAction_0()); }
	()
	{ after(grammarAccess.getLCDScreenActuatorAccess().getLCDScreenActuatorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LCDScreenActuator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LCDScreenActuator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LCDScreenActuator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLCDScreenActuatorAccess().getScreenActuatorKeyword_1()); }
	'screenActuator'
	{ after(grammarAccess.getLCDScreenActuatorAccess().getScreenActuatorKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sensor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__0__Impl
	rule__Sensor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensorAction_0()); }
	()
	{ after(grammarAccess.getSensorAccess().getSensorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sensor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sensor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSensorAccess().getSensorKeyword_1()); }
	'sensor'
	{ after(grammarAccess.getSensorAccess().getSensorKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__State__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__0__Impl
	rule__State__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getNameAssignment_0()); }
	(rule__State__NameAssignment_0)
	{ after(grammarAccess.getStateAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__1__Impl
	rule__State__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getStateAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__2__Impl
	rule__State__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getActionsAssignment_2()); }
	(rule__State__ActionsAssignment_2)
	{ after(grammarAccess.getStateAccess().getActionsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__3__Impl
	rule__State__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getActionsAssignment_3()); }
	(rule__State__ActionsAssignment_3)*
	{ after(grammarAccess.getStateAccess().getActionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__4__Impl
	rule__State__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getTransitionAssignment_4()); }
	(rule__State__TransitionAssignment_4)
	{ after(grammarAccess.getStateAccess().getTransitionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__State__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__State__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getStateAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getActuatorAssignment_0()); }
	(rule__Action__ActuatorAssignment_0)
	{ after(grammarAccess.getActionAccess().getActuatorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__1__Impl
	rule__Action__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getActionAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getValueAssignment_2()); }
	(rule__Action__ValueAssignment_2)
	{ after(grammarAccess.getActionAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Transition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__0__Impl
	rule__Transition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getConditionsAssignment_0()); }
	(rule__Transition__ConditionsAssignment_0)
	{ after(grammarAccess.getTransitionAccess().getConditionsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__1__Impl
	rule__Transition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getConditionsAssignment_1()); }
	(rule__Transition__ConditionsAssignment_1)*
	{ after(grammarAccess.getTransitionAccess().getConditionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__2__Impl
	rule__Transition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getTransitionAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransitionAccess().getNextAssignment_3()); }
	(rule__Transition__NextAssignment_3)
	{ after(grammarAccess.getTransitionAccess().getNextAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getOperatorAssignment_0()); }
	(rule__Condition__OperatorAssignment_0)
	{ after(grammarAccess.getConditionAccess().getOperatorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__1__Impl
	rule__Condition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getSensorAssignment_1()); }
	(rule__Condition__SensorAssignment_1)
	{ after(grammarAccess.getConditionAccess().getSensorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__2__Impl
	rule__Condition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getIsKeyword_2()); }
	'is'
	{ after(grammarAccess.getConditionAccess().getIsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getSignalAssignment_3()); }
	(rule__Condition__SignalAssignment_3)
	{ after(grammarAccess.getConditionAccess().getSignalAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InitialCondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialCondition__Group__0__Impl
	rule__InitialCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialCondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialConditionAccess().getSensorAssignment_0()); }
	(rule__InitialCondition__SensorAssignment_0)
	{ after(grammarAccess.getInitialConditionAccess().getSensorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialCondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialCondition__Group__1__Impl
	rule__InitialCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialCondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialConditionAccess().getIsKeyword_1()); }
	'is'
	{ after(grammarAccess.getInitialConditionAccess().getIsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialCondition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InitialCondition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialCondition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInitialConditionAccess().getSignalAssignment_2()); }
	(rule__InitialCondition__SignalAssignment_2)
	{ after(grammarAccess.getInitialConditionAccess().getSignalAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__App__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getAppAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__InitialAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppAccess().getInitialStateCrossReference_3_0()); }
		(
			{ before(grammarAccess.getAppAccess().getInitialStateEStringParserRuleCall_3_0_1()); }
			ruleEString
			{ after(grammarAccess.getAppAccess().getInitialStateEStringParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getAppAccess().getInitialStateCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__BricksAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppAccess().getBricksBrickParserRuleCall_6_0()); }
		ruleBrick
		{ after(grammarAccess.getAppAccess().getBricksBrickParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__BricksAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppAccess().getBricksBrickParserRuleCall_7_0()); }
		ruleBrick
		{ after(grammarAccess.getAppAccess().getBricksBrickParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__BricksAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppAccess().getBricksBrick2ParserRuleCall_8_0()); }
		ruleBrick2
		{ after(grammarAccess.getAppAccess().getBricksBrick2ParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__StatesAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppAccess().getStatesStateParserRuleCall_10_0()); }
		ruleState
		{ after(grammarAccess.getAppAccess().getStatesStateParserRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__App__StatesAssignment_11
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAppAccess().getStatesStateParserRuleCall_11_0()); }
		ruleState
		{ after(grammarAccess.getAppAccess().getStatesStateParserRuleCall_11_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBrickAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getBrickAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick__PinAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBrickAccess().getPinEIntParserRuleCall_3_0()); }
		ruleEInt
		{ after(grammarAccess.getBrickAccess().getPinEIntParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick2__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBrick2Access().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getBrick2Access().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick2__PinsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBrick2Access().getPinsEIntParserRuleCall_3_0()); }
		ruleEInt
		{ after(grammarAccess.getBrick2Access().getPinsEIntParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Brick2__PinsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBrick2Access().getPinsEIntParserRuleCall_4_0()); }
		ruleEInt
		{ after(grammarAccess.getBrick2Access().getPinsEIntParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getNameEStringParserRuleCall_0_0()); }
		ruleEString
		{ after(grammarAccess.getStateAccess().getNameEStringParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__ActionsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getActionsActionParserRuleCall_2_0()); }
		ruleAction
		{ after(grammarAccess.getStateAccess().getActionsActionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__ActionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getActionsActionParserRuleCall_3_0()); }
		ruleAction
		{ after(grammarAccess.getStateAccess().getActionsActionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__State__TransitionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateAccess().getTransitionTransitionParserRuleCall_4_0()); }
		ruleTransition
		{ after(grammarAccess.getStateAccess().getTransitionTransitionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ActuatorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getActuatorActuatorCrossReference_0_0()); }
		(
			{ before(grammarAccess.getActionAccess().getActuatorActuatorEStringParserRuleCall_0_0_1()); }
			ruleEString
			{ after(grammarAccess.getActionAccess().getActuatorActuatorEStringParserRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getActionAccess().getActuatorActuatorCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getValueSignalParserRuleCall_2_0()); }
		ruleSignal
		{ after(grammarAccess.getActionAccess().getValueSignalParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__ConditionsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransitionAccess().getConditionsInitialConditionParserRuleCall_0_0()); }
		ruleInitialCondition
		{ after(grammarAccess.getTransitionAccess().getConditionsInitialConditionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__ConditionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransitionAccess().getConditionsConditionParserRuleCall_1_0()); }
		ruleCondition
		{ after(grammarAccess.getTransitionAccess().getConditionsConditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transition__NextAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransitionAccess().getNextStateCrossReference_3_0()); }
		(
			{ before(grammarAccess.getTransitionAccess().getNextStateEStringParserRuleCall_3_0_1()); }
			ruleEString
			{ after(grammarAccess.getTransitionAccess().getNextStateEStringParserRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getTransitionAccess().getNextStateCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__OperatorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getOperatorOperatorEnumRuleCall_0_0()); }
		ruleOperator
		{ after(grammarAccess.getConditionAccess().getOperatorOperatorEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__SensorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getSensorSensorCrossReference_1_0()); }
		(
			{ before(grammarAccess.getConditionAccess().getSensorSensorEStringParserRuleCall_1_0_1()); }
			ruleEString
			{ after(grammarAccess.getConditionAccess().getSensorSensorEStringParserRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getConditionAccess().getSensorSensorCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__SignalAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getSignalSignalParserRuleCall_3_0()); }
		ruleSignal
		{ after(grammarAccess.getConditionAccess().getSignalSignalParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialCondition__SensorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInitialConditionAccess().getSensorSensorCrossReference_0_0()); }
		(
			{ before(grammarAccess.getInitialConditionAccess().getSensorSensorEStringParserRuleCall_0_0_1()); }
			ruleEString
			{ after(grammarAccess.getInitialConditionAccess().getSensorSensorEStringParserRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getInitialConditionAccess().getSensorSensorCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InitialCondition__SignalAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInitialConditionAccess().getSignalSignalParserRuleCall_2_0()); }
		ruleSignal
		{ after(grammarAccess.getInitialConditionAccess().getSignalSignalParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DigitalSignal__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDigitalSignalAccess().getValueDigitalSignalEnumEnumRuleCall_0()); }
		ruleDigitalSignalEnum
		{ after(grammarAccess.getDigitalSignalAccess().getValueDigitalSignalEnumEnumRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringSignal__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringSignalAccess().getValueEStringParserRuleCall_0()); }
		ruleEString
		{ after(grammarAccess.getStringSignalAccess().getValueEStringParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
