/*
 * generated by Xtext 2.14.0
 */
grammar InternalRhythm;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.unice.polytech.si5.dsl.rhythm.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.unice.polytech.si5.dsl.rhythm.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.unice.polytech.si5.dsl.rhythm.services.RhythmGrammarAccess;

}
@parser::members {
	private RhythmGrammarAccess grammarAccess;

	public void setGrammarAccess(RhythmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleRhythm
entryRuleRhythm
:
{ before(grammarAccess.getRhythmRule()); }
	 ruleRhythm
{ after(grammarAccess.getRhythmRule()); } 
	 EOF 
;

// Rule Rhythm
ruleRhythm 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRhythmAccess().getGroup()); }
		(rule__Rhythm__Group__0)
		{ after(grammarAccess.getRhythmAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrack
entryRuleTrack
:
{ before(grammarAccess.getTrackRule()); }
	 ruleTrack
{ after(grammarAccess.getTrackRule()); } 
	 EOF 
;

// Rule Track
ruleTrack 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrackAccess().getGroup()); }
		(rule__Track__Group__0)
		{ after(grammarAccess.getTrackAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePattern
entryRulePattern
:
{ before(grammarAccess.getPatternRule()); }
	 rulePattern
{ after(grammarAccess.getPatternRule()); } 
	 EOF 
;

// Rule Pattern
rulePattern 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternAccess().getGroup()); }
		(rule__Pattern__Group__0)
		{ after(grammarAccess.getPatternAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBeat
entryRuleBeat
:
{ before(grammarAccess.getBeatRule()); }
	 ruleBeat
{ after(grammarAccess.getBeatRule()); } 
	 EOF 
;

// Rule Beat
ruleBeat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBeatAccess().getGroup()); }
		(rule__Beat__Group__0)
		{ after(grammarAccess.getBeatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternBar
entryRulePatternBar
:
{ before(grammarAccess.getPatternBarRule()); }
	 rulePatternBar
{ after(grammarAccess.getPatternBarRule()); } 
	 EOF 
;

// Rule PatternBar
rulePatternBar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternBarAccess().getGroup()); }
		(rule__PatternBar__Group__0)
		{ after(grammarAccess.getPatternBarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSection
entryRuleSection
:
{ before(grammarAccess.getSectionRule()); }
	 ruleSection
{ after(grammarAccess.getSectionRule()); } 
	 EOF 
;

// Rule Section
ruleSection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSectionAccess().getGroup()); }
		(rule__Section__Group__0)
		{ after(grammarAccess.getSectionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternLoop
entryRulePatternLoop
:
{ before(grammarAccess.getPatternLoopRule()); }
	 rulePatternLoop
{ after(grammarAccess.getPatternLoopRule()); } 
	 EOF 
;

// Rule PatternLoop
rulePatternLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternLoopAccess().getGroup()); }
		(rule__PatternLoop__Group__0)
		{ after(grammarAccess.getPatternLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternModification
entryRulePatternModification
:
{ before(grammarAccess.getPatternModificationRule()); }
	 rulePatternModification
{ after(grammarAccess.getPatternModificationRule()); } 
	 EOF 
;

// Rule PatternModification
rulePatternModification 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternModificationAccess().getGroup()); }
		(rule__PatternModification__Group__0)
		{ after(grammarAccess.getPatternModificationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall()); }
		RULE_INT
		{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEFloat
entryRuleEFloat
:
{ before(grammarAccess.getEFloatRule()); }
	 ruleEFloat
{ after(grammarAccess.getEFloatRule()); } 
	 EOF 
;

// Rule EFloat
ruleEFloat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEFloatAccess().getGroup()); }
		(rule__EFloat__Group__0)
		{ after(grammarAccess.getEFloatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Note
ruleNote
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNoteAccess().getAlternatives()); }
		(rule__Note__Alternatives)
		{ after(grammarAccess.getNoteAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNoteAccess().getBDEnumLiteralDeclaration_0()); }
		('bd')
		{ after(grammarAccess.getNoteAccess().getBDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getNoteAccess().getSDEnumLiteralDeclaration_1()); }
		('sd')
		{ after(grammarAccess.getNoteAccess().getSDEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getNoteAccess().getBLANKEnumLiteralDeclaration_2()); }
		('_')
		{ after(grammarAccess.getNoteAccess().getBLANKEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getNoteAccess().getCHEnumLiteralDeclaration_3()); }
		('ch')
		{ after(grammarAccess.getNoteAccess().getCHEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getNoteAccess().getOHEnumLiteralDeclaration_4()); }
		('oh')
		{ after(grammarAccess.getNoteAccess().getOHEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getNoteAccess().getCCEnumLiteralDeclaration_5()); }
		('cc')
		{ after(grammarAccess.getNoteAccess().getCCEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getNoteAccess().getRCEnumLiteralDeclaration_6()); }
		('rc')
		{ after(grammarAccess.getNoteAccess().getRCEnumLiteralDeclaration_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rhythm__Group__0__Impl
	rule__Rhythm__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRhythmAccess().getRhythmKeyword_0()); }
	'rhythm'
	{ after(grammarAccess.getRhythmAccess().getRhythmKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rhythm__Group__1__Impl
	rule__Rhythm__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRhythmAccess().getNameAssignment_1()); }
	(rule__Rhythm__NameAssignment_1)
	{ after(grammarAccess.getRhythmAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rhythm__Group__2__Impl
	rule__Rhythm__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRhythmAccess().getTempoKeyword_2()); }
	'tempo'
	{ after(grammarAccess.getRhythmAccess().getTempoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rhythm__Group__3__Impl
	rule__Rhythm__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRhythmAccess().getBPMAssignment_3()); }
	(rule__Rhythm__BPMAssignment_3)
	{ after(grammarAccess.getRhythmAccess().getBPMAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rhythm__Group__4__Impl
	rule__Rhythm__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRhythmAccess().getBPMKeyword_4()); }
	'BPM'
	{ after(grammarAccess.getRhythmAccess().getBPMKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rhythm__Group__5__Impl
	rule__Rhythm__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRhythmAccess().getResolutionKeyword_5()); }
	'resolution:'
	{ after(grammarAccess.getRhythmAccess().getResolutionKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rhythm__Group__6__Impl
	rule__Rhythm__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRhythmAccess().getResolutionAssignment_6()); }
	(rule__Rhythm__ResolutionAssignment_6)
	{ after(grammarAccess.getRhythmAccess().getResolutionAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rhythm__Group__7__Impl
	rule__Rhythm__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRhythmAccess().getOffsetKeyword_7()); }
	'offset:'
	{ after(grammarAccess.getRhythmAccess().getOffsetKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rhythm__Group__8__Impl
	rule__Rhythm__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRhythmAccess().getOffsetAssignment_8()); }
	(rule__Rhythm__OffsetAssignment_8)
	{ after(grammarAccess.getRhythmAccess().getOffsetAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rhythm__Group__9__Impl
	rule__Rhythm__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRhythmAccess().getTickKeyword_9()); }
	'tick'
	{ after(grammarAccess.getRhythmAccess().getTickKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rhythm__Group__10__Impl
	rule__Rhythm__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRhythmAccess().getTracksAssignment_10()); }
	(rule__Rhythm__TracksAssignment_10)
	{ after(grammarAccess.getRhythmAccess().getTracksAssignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rhythm__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRhythmAccess().getTracksAssignment_11()); }
	(rule__Rhythm__TracksAssignment_11)*
	{ after(grammarAccess.getRhythmAccess().getTracksAssignment_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Track__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Track__Group__0__Impl
	rule__Track__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackAccess().getTrackKeyword_0()); }
	'track'
	{ after(grammarAccess.getTrackAccess().getTrackKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Track__Group__1__Impl
	rule__Track__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackAccess().getNameAssignment_1()); }
	(rule__Track__NameAssignment_1)
	{ after(grammarAccess.getTrackAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Track__Group__2__Impl
	rule__Track__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getTrackAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Track__Group__3__Impl
	rule__Track__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackAccess().getGroup_3()); }
	(rule__Track__Group_3__0)?
	{ after(grammarAccess.getTrackAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Track__Group__4__Impl
	rule__Track__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackAccess().getSectionsKeyword_4()); }
	'sections:'
	{ after(grammarAccess.getTrackAccess().getSectionsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Track__Group__5__Impl
	rule__Track__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackAccess().getSectionsAssignment_5()); }
	(rule__Track__SectionsAssignment_5)
	{ after(grammarAccess.getTrackAccess().getSectionsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Track__Group__6__Impl
	rule__Track__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackAccess().getSectionsAssignment_6()); }
	(rule__Track__SectionsAssignment_6)*
	{ after(grammarAccess.getTrackAccess().getSectionsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Track__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getTrackAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Track__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Track__Group_3__0__Impl
	rule__Track__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackAccess().getPatternsKeyword_3_0()); }
	'patterns:'
	{ after(grammarAccess.getTrackAccess().getPatternsKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Track__Group_3__1__Impl
	rule__Track__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackAccess().getPatternsAssignment_3_1()); }
	(rule__Track__PatternsAssignment_3_1)
	{ after(grammarAccess.getTrackAccess().getPatternsAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Track__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrackAccess().getPatternsAssignment_3_2()); }
	(rule__Track__PatternsAssignment_3_2)*
	{ after(grammarAccess.getTrackAccess().getPatternsAssignment_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__0__Impl
	rule__Pattern__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getNameAssignment_0()); }
	(rule__Pattern__NameAssignment_0)
	{ after(grammarAccess.getPatternAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__1__Impl
	rule__Pattern__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getPatternAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__2__Impl
	rule__Pattern__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getBarAssignment_2()); }
	(rule__Pattern__BarAssignment_2)
	{ after(grammarAccess.getPatternAccess().getBarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getPatternAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Beat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Beat__Group__0__Impl
	rule__Beat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeatAccess().getTicksAssignment_0()); }
	(rule__Beat__TicksAssignment_0)
	{ after(grammarAccess.getBeatAccess().getTicksAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Beat__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeatAccess().getGroup_1()); }
	(rule__Beat__Group_1__0)*
	{ after(grammarAccess.getBeatAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Beat__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Beat__Group_1__0__Impl
	rule__Beat__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeatAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getBeatAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Beat__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeatAccess().getTicksAssignment_1_1()); }
	(rule__Beat__TicksAssignment_1_1)
	{ after(grammarAccess.getBeatAccess().getTicksAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternBar__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternBar__Group__0__Impl
	rule__PatternBar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternBar__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternBarAccess().getBeatKeyword_0()); }
	'beat:'
	{ after(grammarAccess.getPatternBarAccess().getBeatKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternBar__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternBar__Group__1__Impl
	rule__PatternBar__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternBar__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternBarAccess().getBeatsAssignment_1()); }
	(rule__PatternBar__BeatsAssignment_1)
	{ after(grammarAccess.getPatternBarAccess().getBeatsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternBar__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternBar__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternBar__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternBarAccess().getGroup_2()); }
	(rule__PatternBar__Group_2__0)*
	{ after(grammarAccess.getPatternBarAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternBar__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternBar__Group_2__0__Impl
	rule__PatternBar__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternBar__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternBarAccess().getBeatKeyword_2_0()); }
	'beat:'
	{ after(grammarAccess.getPatternBarAccess().getBeatKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternBar__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternBar__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternBar__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternBarAccess().getBeatsAssignment_2_1()); }
	(rule__PatternBar__BeatsAssignment_2_1)
	{ after(grammarAccess.getPatternBarAccess().getBeatsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Section__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Section__Group__0__Impl
	rule__Section__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionAccess().getNameAssignment_0()); }
	(rule__Section__NameAssignment_0)
	{ after(grammarAccess.getSectionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Section__Group__1__Impl
	rule__Section__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getSectionAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Section__Group__2__Impl
	rule__Section__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionAccess().getPatternKeyword_2()); }
	'pattern:'
	{ after(grammarAccess.getSectionAccess().getPatternKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Section__Group__3__Impl
	rule__Section__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionAccess().getPatternLoopsAssignment_3()); }
	(rule__Section__PatternLoopsAssignment_3)
	{ after(grammarAccess.getSectionAccess().getPatternLoopsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Section__Group__4__Impl
	rule__Section__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionAccess().getGroup_4()); }
	(rule__Section__Group_4__0)*
	{ after(grammarAccess.getSectionAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Section__Group__5__Impl
	rule__Section__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionAccess().getPatternModificationsAssignment_5()); }
	(rule__Section__PatternModificationsAssignment_5)*
	{ after(grammarAccess.getSectionAccess().getPatternModificationsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Section__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getSectionAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Section__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Section__Group_4__0__Impl
	rule__Section__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getSectionAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Section__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSectionAccess().getPatternLoopsAssignment_4_1()); }
	(rule__Section__PatternLoopsAssignment_4_1)
	{ after(grammarAccess.getSectionAccess().getPatternLoopsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternLoop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternLoop__Group__0__Impl
	rule__PatternLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternLoop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternLoopAccess().getPatternAssignment_0()); }
	(rule__PatternLoop__PatternAssignment_0)
	{ after(grammarAccess.getPatternLoopAccess().getPatternAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternLoop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternLoop__Group__1__Impl
	rule__PatternLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternLoop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternLoopAccess().getLoopNumberAssignment_1()); }
	(rule__PatternLoop__LoopNumberAssignment_1)
	{ after(grammarAccess.getPatternLoopAccess().getLoopNumberAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternLoop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternLoop__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternLoop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternLoopAccess().getTimesKeyword_2()); }
	'times'
	{ after(grammarAccess.getPatternLoopAccess().getTimesKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternModification__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternModification__Group__0__Impl
	rule__PatternModification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternModificationAccess().getPatternAssignment_0()); }
	(rule__PatternModification__PatternAssignment_0)
	{ after(grammarAccess.getPatternModificationAccess().getPatternAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternModification__Group__1__Impl
	rule__PatternModification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternModificationAccess().getIterationKeyword_1()); }
	'(iteration:'
	{ after(grammarAccess.getPatternModificationAccess().getIterationKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternModification__Group__2__Impl
	rule__PatternModification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternModificationAccess().getIterationAssignment_2()); }
	(rule__PatternModification__IterationAssignment_2)
	{ after(grammarAccess.getPatternModificationAccess().getIterationAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternModification__Group__3__Impl
	rule__PatternModification__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternModificationAccess().getBeatKeyword_3()); }
	',beat:'
	{ after(grammarAccess.getPatternModificationAccess().getBeatKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternModification__Group__4__Impl
	rule__PatternModification__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternModificationAccess().getBeatNumberAssignment_4()); }
	(rule__PatternModification__BeatNumberAssignment_4)
	{ after(grammarAccess.getPatternModificationAccess().getBeatNumberAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternModification__Group__5__Impl
	rule__PatternModification__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternModificationAccess().getRightParenthesisColonKeyword_5()); }
	'):'
	{ after(grammarAccess.getPatternModificationAccess().getRightParenthesisColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternModification__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternModificationAccess().getBeatAssignment_6()); }
	(rule__PatternModification__BeatAssignment_6)
	{ after(grammarAccess.getPatternModificationAccess().getBeatAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EFloat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__0__Impl
	rule__EFloat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__1__Impl
	rule__EFloat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getEFloatAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EFloat__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EFloat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getEFloatAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rhythm__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRhythmAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getRhythmAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__BPMAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRhythmAccess().getBPMEIntParserRuleCall_3_0()); }
		ruleEInt
		{ after(grammarAccess.getRhythmAccess().getBPMEIntParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__ResolutionAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRhythmAccess().getResolutionEIntParserRuleCall_6_0()); }
		ruleEInt
		{ after(grammarAccess.getRhythmAccess().getResolutionEIntParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__OffsetAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRhythmAccess().getOffsetEFloatParserRuleCall_8_0()); }
		ruleEFloat
		{ after(grammarAccess.getRhythmAccess().getOffsetEFloatParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__TracksAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRhythmAccess().getTracksTrackParserRuleCall_10_0()); }
		ruleTrack
		{ after(grammarAccess.getRhythmAccess().getTracksTrackParserRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rhythm__TracksAssignment_11
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRhythmAccess().getTracksTrackParserRuleCall_11_0()); }
		ruleTrack
		{ after(grammarAccess.getRhythmAccess().getTracksTrackParserRuleCall_11_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getTrackAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__PatternsAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackAccess().getPatternsPatternParserRuleCall_3_1_0()); }
		rulePattern
		{ after(grammarAccess.getTrackAccess().getPatternsPatternParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__PatternsAssignment_3_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackAccess().getPatternsPatternParserRuleCall_3_2_0()); }
		rulePattern
		{ after(grammarAccess.getTrackAccess().getPatternsPatternParserRuleCall_3_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__SectionsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackAccess().getSectionsSectionParserRuleCall_5_0()); }
		ruleSection
		{ after(grammarAccess.getTrackAccess().getSectionsSectionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Track__SectionsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrackAccess().getSectionsSectionParserRuleCall_6_0()); }
		ruleSection
		{ after(grammarAccess.getTrackAccess().getSectionsSectionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getNameEStringParserRuleCall_0_0()); }
		ruleEString
		{ after(grammarAccess.getPatternAccess().getNameEStringParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__BarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getBarPatternBarParserRuleCall_2_0()); }
		rulePatternBar
		{ after(grammarAccess.getPatternAccess().getBarPatternBarParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__TicksAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBeatAccess().getTicksNoteEnumRuleCall_0_0()); }
		ruleNote
		{ after(grammarAccess.getBeatAccess().getTicksNoteEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Beat__TicksAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBeatAccess().getTicksNoteEnumRuleCall_1_1_0()); }
		ruleNote
		{ after(grammarAccess.getBeatAccess().getTicksNoteEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternBar__BeatsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternBarAccess().getBeatsBeatParserRuleCall_1_0()); }
		ruleBeat
		{ after(grammarAccess.getPatternBarAccess().getBeatsBeatParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternBar__BeatsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternBarAccess().getBeatsBeatParserRuleCall_2_1_0()); }
		ruleBeat
		{ after(grammarAccess.getPatternBarAccess().getBeatsBeatParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSectionAccess().getNameEStringParserRuleCall_0_0()); }
		ruleEString
		{ after(grammarAccess.getSectionAccess().getNameEStringParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__PatternLoopsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSectionAccess().getPatternLoopsPatternLoopParserRuleCall_3_0()); }
		rulePatternLoop
		{ after(grammarAccess.getSectionAccess().getPatternLoopsPatternLoopParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__PatternLoopsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSectionAccess().getPatternLoopsPatternLoopParserRuleCall_4_1_0()); }
		rulePatternLoop
		{ after(grammarAccess.getSectionAccess().getPatternLoopsPatternLoopParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Section__PatternModificationsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSectionAccess().getPatternModificationsPatternModificationParserRuleCall_5_0()); }
		rulePatternModification
		{ after(grammarAccess.getSectionAccess().getPatternModificationsPatternModificationParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternLoop__PatternAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternLoopAccess().getPatternPatternCrossReference_0_0()); }
		(
			{ before(grammarAccess.getPatternLoopAccess().getPatternPatternEStringParserRuleCall_0_0_1()); }
			ruleEString
			{ after(grammarAccess.getPatternLoopAccess().getPatternPatternEStringParserRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getPatternLoopAccess().getPatternPatternCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternLoop__LoopNumberAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternLoopAccess().getLoopNumberEIntParserRuleCall_1_0()); }
		ruleEInt
		{ after(grammarAccess.getPatternLoopAccess().getLoopNumberEIntParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__PatternAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternModificationAccess().getPatternPatternCrossReference_0_0()); }
		(
			{ before(grammarAccess.getPatternModificationAccess().getPatternPatternEStringParserRuleCall_0_0_1()); }
			ruleEString
			{ after(grammarAccess.getPatternModificationAccess().getPatternPatternEStringParserRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getPatternModificationAccess().getPatternPatternCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__IterationAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternModificationAccess().getIterationEIntParserRuleCall_2_0()); }
		ruleEInt
		{ after(grammarAccess.getPatternModificationAccess().getIterationEIntParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__BeatNumberAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternModificationAccess().getBeatNumberEIntParserRuleCall_4_0()); }
		ruleEInt
		{ after(grammarAccess.getPatternModificationAccess().getBeatNumberEIntParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternModification__BeatAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternModificationAccess().getBeatBeatParserRuleCall_6_0()); }
		ruleBeat
		{ after(grammarAccess.getPatternModificationAccess().getBeatBeatParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
