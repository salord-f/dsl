/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.si5.dsl.rhythm.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.unice.polytech.si5.dsl.rhythm.ide.contentassist.antlr.internal.InternalRhythmParser;
import fr.unice.polytech.si5.dsl.rhythm.services.RhythmGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class RhythmParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(RhythmGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, RhythmGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getNoteAccess().getAlternatives(), "rule__Note__Alternatives");
			builder.put(grammarAccess.getRhythmAccess().getGroup(), "rule__Rhythm__Group__0");
			builder.put(grammarAccess.getTrackAccess().getGroup(), "rule__Track__Group__0");
			builder.put(grammarAccess.getTrackAccess().getGroup_3(), "rule__Track__Group_3__0");
			builder.put(grammarAccess.getPatternAccess().getGroup(), "rule__Pattern__Group__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_4(), "rule__Pattern__Group_4__0");
			builder.put(grammarAccess.getBeatAccess().getGroup(), "rule__Beat__Group__0");
			builder.put(grammarAccess.getBeatAccess().getGroup_1(), "rule__Beat__Group_1__0");
			builder.put(grammarAccess.getCompositionAccess().getGroup(), "rule__Composition__Group__0");
			builder.put(grammarAccess.getCompositionAccess().getGroup_1(), "rule__Composition__Group_1__0");
			builder.put(grammarAccess.getSectionAccess().getGroup(), "rule__Section__Group__0");
			builder.put(grammarAccess.getSectionAccess().getGroup_4(), "rule__Section__Group_4__0");
			builder.put(grammarAccess.getPatternLoopAccess().getGroup(), "rule__PatternLoop__Group__0");
			builder.put(grammarAccess.getPatternModificationAccess().getGroup(), "rule__PatternModification__Group__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup(), "rule__EFloat__Group__0");
			builder.put(grammarAccess.getRhythmAccess().getNameAssignment_1(), "rule__Rhythm__NameAssignment_1");
			builder.put(grammarAccess.getRhythmAccess().getBPMAssignment_3(), "rule__Rhythm__BPMAssignment_3");
			builder.put(grammarAccess.getRhythmAccess().getResolutionAssignment_6(), "rule__Rhythm__ResolutionAssignment_6");
			builder.put(grammarAccess.getRhythmAccess().getOffsetAssignment_8(), "rule__Rhythm__OffsetAssignment_8");
			builder.put(grammarAccess.getRhythmAccess().getTracksAssignment_10(), "rule__Rhythm__TracksAssignment_10");
			builder.put(grammarAccess.getRhythmAccess().getTracksAssignment_11(), "rule__Rhythm__TracksAssignment_11");
			builder.put(grammarAccess.getTrackAccess().getNameAssignment_1(), "rule__Track__NameAssignment_1");
			builder.put(grammarAccess.getTrackAccess().getPatternsAssignment_3_1(), "rule__Track__PatternsAssignment_3_1");
			builder.put(grammarAccess.getTrackAccess().getPatternsAssignment_3_2(), "rule__Track__PatternsAssignment_3_2");
			builder.put(grammarAccess.getTrackAccess().getSectionsAssignment_5(), "rule__Track__SectionsAssignment_5");
			builder.put(grammarAccess.getTrackAccess().getSectionsAssignment_6(), "rule__Track__SectionsAssignment_6");
			builder.put(grammarAccess.getTrackAccess().getCompositionAssignment_8(), "rule__Track__CompositionAssignment_8");
			builder.put(grammarAccess.getPatternAccess().getNameAssignment_0(), "rule__Pattern__NameAssignment_0");
			builder.put(grammarAccess.getPatternAccess().getBeatsAssignment_3(), "rule__Pattern__BeatsAssignment_3");
			builder.put(grammarAccess.getPatternAccess().getBeatsAssignment_4_1(), "rule__Pattern__BeatsAssignment_4_1");
			builder.put(grammarAccess.getBeatAccess().getTicksAssignment_0(), "rule__Beat__TicksAssignment_0");
			builder.put(grammarAccess.getBeatAccess().getTicksAssignment_1_1(), "rule__Beat__TicksAssignment_1_1");
			builder.put(grammarAccess.getCompositionAccess().getSectionsAssignment_0(), "rule__Composition__SectionsAssignment_0");
			builder.put(grammarAccess.getCompositionAccess().getSectionsAssignment_1_1(), "rule__Composition__SectionsAssignment_1_1");
			builder.put(grammarAccess.getSectionAccess().getNameAssignment_0(), "rule__Section__NameAssignment_0");
			builder.put(grammarAccess.getSectionAccess().getPatternLoopsAssignment_3(), "rule__Section__PatternLoopsAssignment_3");
			builder.put(grammarAccess.getSectionAccess().getPatternLoopsAssignment_4_1(), "rule__Section__PatternLoopsAssignment_4_1");
			builder.put(grammarAccess.getSectionAccess().getPatternModificationsAssignment_5(), "rule__Section__PatternModificationsAssignment_5");
			builder.put(grammarAccess.getPatternLoopAccess().getPatternAssignment_0(), "rule__PatternLoop__PatternAssignment_0");
			builder.put(grammarAccess.getPatternLoopAccess().getLoopNumberAssignment_1(), "rule__PatternLoop__LoopNumberAssignment_1");
			builder.put(grammarAccess.getPatternModificationAccess().getPatternAssignment_0(), "rule__PatternModification__PatternAssignment_0");
			builder.put(grammarAccess.getPatternModificationAccess().getIterationAssignment_2(), "rule__PatternModification__IterationAssignment_2");
			builder.put(grammarAccess.getPatternModificationAccess().getBeatNumberAssignment_4(), "rule__PatternModification__BeatNumberAssignment_4");
			builder.put(grammarAccess.getPatternModificationAccess().getBeatAssignment_6(), "rule__PatternModification__BeatAssignment_6");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private RhythmGrammarAccess grammarAccess;

	@Override
	protected InternalRhythmParser createParser() {
		InternalRhythmParser result = new InternalRhythmParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public RhythmGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(RhythmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
