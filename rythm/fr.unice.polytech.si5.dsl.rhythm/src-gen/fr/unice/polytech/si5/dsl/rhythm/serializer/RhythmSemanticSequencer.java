/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.si5.dsl.rhythm.serializer;

import com.google.inject.Inject;
import fr.unice.polytech.si5.dsl.rhythm.services.RhythmGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import rhythmML.Beat;
import rhythmML.Pattern;
import rhythmML.PatternLoop;
import rhythmML.PatternModification;
import rhythmML.Rhythm;
import rhythmML.RhythmMLPackage;
import rhythmML.Section;
import rhythmML.Track;

@SuppressWarnings("all")
public class RhythmSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RhythmGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RhythmMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RhythmMLPackage.BEAT:
				sequence_Beat(context, (Beat) semanticObject); 
				return; 
			case RhythmMLPackage.PATTERN:
				sequence_Pattern(context, (Pattern) semanticObject); 
				return; 
			case RhythmMLPackage.PATTERN_LOOP:
				sequence_PatternLoop(context, (PatternLoop) semanticObject); 
				return; 
			case RhythmMLPackage.PATTERN_MODIFICATION:
				sequence_PatternModification(context, (PatternModification) semanticObject); 
				return; 
			case RhythmMLPackage.RHYTHM:
				sequence_Rhythm(context, (Rhythm) semanticObject); 
				return; 
			case RhythmMLPackage.SECTION:
				sequence_Section(context, (Section) semanticObject); 
				return; 
			case RhythmMLPackage.TRACK:
				sequence_Track(context, (Track) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Beat returns Beat
	 *
	 * Constraint:
	 *     (ticks+=Note ticks+=Note*)
	 */
	protected void sequence_Beat(ISerializationContext context, Beat semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PatternLoop returns PatternLoop
	 *
	 * Constraint:
	 *     (pattern=[Pattern|EString] loopNumber=EInt)
	 */
	protected void sequence_PatternLoop(ISerializationContext context, PatternLoop semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RhythmMLPackage.Literals.PATTERN_LOOP__PATTERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RhythmMLPackage.Literals.PATTERN_LOOP__PATTERN));
			if (transientValues.isValueTransient(semanticObject, RhythmMLPackage.Literals.PATTERN_LOOP__LOOP_NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RhythmMLPackage.Literals.PATTERN_LOOP__LOOP_NUMBER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPatternLoopAccess().getPatternPatternEStringParserRuleCall_0_0_1(), semanticObject.eGet(RhythmMLPackage.Literals.PATTERN_LOOP__PATTERN, false));
		feeder.accept(grammarAccess.getPatternLoopAccess().getLoopNumberEIntParserRuleCall_1_0(), semanticObject.getLoopNumber());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PatternModification returns PatternModification
	 *
	 * Constraint:
	 *     (pattern=[Pattern|EString] iteration=EInt beatNumber=EInt beat=Beat)
	 */
	protected void sequence_PatternModification(ISerializationContext context, PatternModification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RhythmMLPackage.Literals.PATTERN_MODIFICATION__PATTERN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RhythmMLPackage.Literals.PATTERN_MODIFICATION__PATTERN));
			if (transientValues.isValueTransient(semanticObject, RhythmMLPackage.Literals.PATTERN_MODIFICATION__ITERATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RhythmMLPackage.Literals.PATTERN_MODIFICATION__ITERATION));
			if (transientValues.isValueTransient(semanticObject, RhythmMLPackage.Literals.PATTERN_MODIFICATION__BEAT_NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RhythmMLPackage.Literals.PATTERN_MODIFICATION__BEAT_NUMBER));
			if (transientValues.isValueTransient(semanticObject, RhythmMLPackage.Literals.PATTERN_MODIFICATION__BEAT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RhythmMLPackage.Literals.PATTERN_MODIFICATION__BEAT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPatternModificationAccess().getPatternPatternEStringParserRuleCall_0_0_1(), semanticObject.eGet(RhythmMLPackage.Literals.PATTERN_MODIFICATION__PATTERN, false));
		feeder.accept(grammarAccess.getPatternModificationAccess().getIterationEIntParserRuleCall_2_0(), semanticObject.getIteration());
		feeder.accept(grammarAccess.getPatternModificationAccess().getBeatNumberEIntParserRuleCall_4_0(), semanticObject.getBeatNumber());
		feeder.accept(grammarAccess.getPatternModificationAccess().getBeatBeatParserRuleCall_6_0(), semanticObject.getBeat());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Pattern returns Pattern
	 *
	 * Constraint:
	 *     (name=EString beats+=Beat beats+=Beat*)
	 */
	protected void sequence_Pattern(ISerializationContext context, Pattern semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rhythm returns Rhythm
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         BPM=EInt 
	 *         resolution=EInt 
	 *         offset=EFloat 
	 *         tracks+=Track 
	 *         tracks+=Track*
	 *     )
	 */
	protected void sequence_Rhythm(ISerializationContext context, Rhythm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Section returns Section
	 *
	 * Constraint:
	 *     (name=EString patternLoops+=PatternLoop patternLoops+=PatternLoop* patternModifications+=PatternModification*)
	 */
	protected void sequence_Section(ISerializationContext context, Section semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Track returns Track
	 *
	 * Constraint:
	 *     (name=EString (patterns+=Pattern patterns+=Pattern*)? sections+=Section sections+=Section*)
	 */
	protected void sequence_Track(ISerializationContext context, Track semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
