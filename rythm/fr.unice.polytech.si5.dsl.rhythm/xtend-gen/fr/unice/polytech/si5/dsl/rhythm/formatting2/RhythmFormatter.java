/**
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.si5.dsl.rhythm.formatting2;

import com.google.inject.Inject;
import fr.unice.polytech.si5.dsl.rhythm.services.RhythmGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import rhythmML.Pattern;
import rhythmML.Rhythm;
import rhythmML.Section;
import rhythmML.Track;

@SuppressWarnings("all")
public class RhythmFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private RhythmGrammarAccess _rhythmGrammarAccess;
  
  protected void _format(final Rhythm rhythm, @Extension final IFormattableDocument document) {
    EList<Track> _tracks = rhythm.getTracks();
    for (final Track track : _tracks) {
      document.<Track>format(track);
    }
  }
  
  protected void _format(final Track track, @Extension final IFormattableDocument document) {
    EList<Pattern> _patterns = track.getPatterns();
    for (final Pattern pattern : _patterns) {
      document.<Pattern>format(pattern);
    }
    EList<Section> _sections = track.getSections();
    for (final Section section : _sections) {
      document.<Section>format(section);
    }
  }
  
  public void format(final Object rhythm, final IFormattableDocument document) {
    if (rhythm instanceof XtextResource) {
      _format((XtextResource)rhythm, document);
      return;
    } else if (rhythm instanceof Rhythm) {
      _format((Rhythm)rhythm, document);
      return;
    } else if (rhythm instanceof Track) {
      _format((Track)rhythm, document);
      return;
    } else if (rhythm instanceof EObject) {
      _format((EObject)rhythm, document);
      return;
    } else if (rhythm == null) {
      _format((Void)null, document);
      return;
    } else if (rhythm != null) {
      _format(rhythm, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(rhythm, document).toString());
    }
  }
}
